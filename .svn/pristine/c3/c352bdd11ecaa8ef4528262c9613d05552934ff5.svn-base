package architecture;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.Vector;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

/*Clase que representa a un input/output u oculta, aunque en esta primera versión no
  no tendremos ocultas*/


public class Neuron {
	
	public static final int SIZE = 10;	
	private BigDecimal[] values; 
	private static Logger log = Logger.getLogger(Neuron.class);
	private BigDecimal maxValue; //Valor máximo dentro de la neurona y con el q normalizaremos
	
	
	//Constructor
	public Neuron() {
		super();
	}

	public Neuron (BigDecimal[] values){
		super();
		this.values = values;
	}
	
	public void printNeuron (){
		//PropertyConfigurator.configure(this.getClass().getResource("log4j.properties"));
		log.trace ("Valores de la neurona: ");
		System.out.print ("Valores de la neurona: ");
		for (BigDecimal d: values){
			log.trace(d);
			System.out.print(d+ " ");
		}
		System.out.print("\n");
	}	
		
	
	
	
//	
//	//Return new Neuron (1x10)
//		public Neuron multiplicarNeuronas (Neuron b)
//		{
//			ArrayList<BigDecimal> bValues = b.getValues();
//			ArrayList<BigDecimal> newValues = new ArrayList<>();
//			int i=0;
//			for (BigDecimal a: values)
//			{
//				BigDecimal c = a.multiply(bValues.get(i));
//				c = c.setScale(PRECISION, RoundingMode.HALF_UP);
//				newValues.add(c);
//				i++;
//			}
//			
//			Neuron newNeuron = new Neuron();
//			newNeuron.setValues(newValues);
//			
//			return newNeuron;
//		}
//		
//	//Return new Matrix 10x10 (resultado de multiplicar una neurona/array y otra transp.)
//		
//		public ArrayList<Neuron> calculateDeltaMatrix (Neuron vertical)
//		{
//			ArrayList<Neuron> matrix = new ArrayList<Neuron>();
//			ArrayList<BigDecimal> verValues = vertical.getValues();
//			
//			for (int i = 0; i<SIZE; i++)
//			{
//				ArrayList<BigDecimal> aux = new ArrayList<>();
//				for (int j = 0; j<vertical.SIZE; j++){
//					
//					BigDecimal a = values.get(i);
//					BigDecimal b = verValues.get(j);
//					BigDecimal c = a.multiply(b);
//					c = c.setScale(PRECISION, RoundingMode.HALF_UP);
//					aux.add(c);
//				}
//				Neuron n = new Neuron();
//				n.setValues(aux);
//				matrix.add(n);
//			}
//			return matrix;
//		}		
			
//		
//		//Sumar dos neuronas 
//		//this neuron plus neuron b
//				public Neuron addiction (Neuron b){
//					
//					Neuron n = new Neuron();
//					for (int i = 0; i<values.size(); i++){
//						BigDecimal newValue = values.get(i).add((b.getValues().get(i))); 
//						n.addValue(newValue);
//					}
//					return n;
//				}
//		
//		
//		//Entra un bigdecimal y se lo añadimos al vector values
//		public void addValue (BigDecimal b){
//			values.add(b);
//		}
//	
//		
//		//this neuron minus neuron b
//		public Neuron subtraction (Neuron b){
//			
//			log.trace("Subtraction");
//			log.trace("Neuron class: "+ this.values.size()+ "Neuron parametro: "+ this.values.size());
//			Neuron n = new Neuron();
//			for (int i = 0; i<values.size(); i++){
//				
//				//log.trace("Dentro del for"+ values.get(i));	
//				BigDecimal newValue = values.get(i).subtract(b.getValues().get(i)); 
//				n.addValue(newValue);
//			}
//			return n;
//		}
//		
		
//		// devuelve el cuadrado del vector values 
//		 public Neuron squareValues (){
//			 Neuron n = new Neuron();
//			 for (BigDecimal d: values){
//				 BigDecimal d2 = d.pow(2);
//				 n.addValue(d2);
//			 }
//			 return n;
//		 }
//		 
//		 //Constante por vector: Multiplica un nº por el vector values.
//		 
//		 public Neuron mulCnstValues (double cnst){
//			 Neuron newNeuron = new Neuron();
//			 for (BigDecimal d: values){
//				 BigDecimal aux = d.multiply(new BigDecimal(cnst));
//				 newNeuron.addValue(aux);
//			 }
//			 this.values = newNeuron.getValues();
//			 return this;
//		 }
//		 
		 //Devuelve false si los valores de la neurona de la clase, son mayores que la cota (con que se pase en uno vale)
		 
//				 
//		//Crea una neurona aletoria con valores incluidos entre los parámetros de entrada
//		public Neuron randomNeuron (double max, double min)
//		{
//			for (int i = 0; i<SIZE; i++){
//				BigDecRand t = new BigDecRand(max, min, PRECISION);
//				values.add(t.getValue());
//			}	
//			return this;
//		}
	 
	
	//Normalizar neuron to Maxime: todos los elementos del vector, divididos entre el mayor.
	//No la devuelve, sino que sobreescribe la clase	
	public void normalizeNeuron ()
	{
		BigDecimal[] aux = new BigDecimal[this.values.length];
		maxValue = this.getValues()[0];
		for (BigDecimal b: this.getValues())
		{
			if ((b.compareTo(maxValue)) == 1){
				maxValue = b;
			}
		}
		log.trace("Before normalize: ");
		for (BigDecimal b: this.getValues())
		{
			log.trace(b);
		}
		log.trace("After normalizeNeuron");
		log.trace("divisor value: " +maxValue);
		for (int i = 0; i< this.values.length; i++)
		{
			BigDecimal b = this.values[i];
			aux[i] = b.divide(maxValue, RoundingMode.HALF_UP); //in case the exact result has an infinite number of decimals
			log.trace(aux[i]);
		}
 
		this.setValues(aux);
	} 
		
	
public void undoNormalizationNeuron (){
	BigDecimal[] aux = new BigDecimal[this.values.length];
	log.trace("Normalized Neurons: ");
	for (BigDecimal b: this.getValues())
	{
		log.trace(b);
	}
	log.trace("After undo normalized");
	log.trace("multiplicando: " +maxValue);
	for (int i = 0; i< this.values.length; i++)
	{
		BigDecimal b = this.values[i];
		b = b.multiply (maxValue);
		b = b.setScale(Network.PRECISION, RoundingMode.HALF_UP);
		aux[i] = b;
		
		//in case the exact result has an infinite number of decimals
		log.trace(aux[i]);
	}

	this.setValues(aux);
		
		
		
	} 
	
	public BigDecimal getMaxValue() {
	return maxValue;
}

public void setMaxValue(BigDecimal maxValue) {
	this.maxValue = maxValue;
}

	public BigDecimal[] getValues() {
		return values;
	}

	public void setValues(BigDecimal[] values) {
		this.values = values;
	}

//una vez normalizadas las salidas, vamos a probar a añadir la componente menor negativa, en positivo al resto de valores
	//para así solo teener valores positivos
void addSmallestValueNegative (){
	log.info ("Add smallest value");
	BigDecimal aux[] = new BigDecimal[this.values.length];
	BigDecimal min = this.getValues()[0];
	for (BigDecimal b: this.getValues())
	{
		if ((b.compareTo(min)) == -1){ 
			min = b;
		}
	}
	min = min.negate();
	log.trace("add smallest value (positive): " +min);
	for (int i = 0; i< this.values.length; i++)
	{
		BigDecimal b = this.values[i];
		aux[i] = b.add(min);
		log.trace(b);
	}
	this.setValues(aux);
}

		

}
